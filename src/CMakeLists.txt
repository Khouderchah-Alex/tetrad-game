cmake_minimum_required(VERSION 3.13)
project(tetrad-game)

# Version Number
set(VERSION_MAJOR 1)
set(VERSION_MINOR 0)

if(CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)
	message(FATAL_ERROR "Please use a different build directory than the source directory")
endif()

option(BUILD_ENABLE_UNITY "Perform a unity build (Not currently working with MSVC)" OFF)

# Define asset path for use in the executable
set(ASSET_PATH ${CMAKE_SOURCE_DIR}/../assets/)

# Add the system type for the config file
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  set(SYSTEM_TYPE 1)
  set(ALL_LIBS z)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  set(SYSTEM_TYPE 2)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  set(SYSTEM_TYPE 3)
else(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  set(SYSTEM_TYPE 0)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

# Determine Compiler
if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang)
  message("Compiler is Clang")
  add_definitions(-DCOMPILER_IS_CLANG)
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
  message("Compiler is GNU")
  add_definitions(-DCOMPILER_IS_GCC)
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL Intel)
  message("Compiler is GCC")
  add_definitions(-DCOMPILER_IS_INTEL)
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
  message("Compiler is MSVC")
  add_definitions(-DCOMPILER_IS_MSVC
	  -DTW_STATIC
	  -DTW_NO_LIB_PRAGMA
	  -DTW_NO_DIRECT3D
	  -DGLEW_STATIC
	  -D_CRT_SECURE_NO_WARNINGS)
else()
  message("Compiler is unknown!")
endif()

# Determine Endianness
include (TestBigEndian)
TEST_BIG_ENDIAN(BIG_ENDIAN)
if(${BIG_ENDIAN})
  add_definitions(-DIS_BIG_ENDIAN)
endif()

# 32 vs 64 bit
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(ADDRESS_WIDTH 64)
else(CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(ADDRESS_WIDTH 32)
endif(CMAKE_SIZEOF_VOID_P EQUAL 8)

message("CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME} ${ADDRESS_WIDTH}")

# Debug by default - only runs for single configurations
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Debug' as none was specified.")
  set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release"
    "MinSizeRel" "RelWithDebInfo")
endif()

message("CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")

find_package(OpenGL REQUIRED)
set(wxWidgets_CONFIGURATION mswu)
find_package(wxWidgets COMPONENTS core base adv)
include( "${wxWidgets_USE_FILE}" )

# GLM definitions.
# TODO - Make glm an interface library and add these definitions solely to that
# target.
add_definitions(-DGLM_FORCE_CTOR_INIT
	-DGLM_ENABLE_EXPERIMENTAL)

add_subdirectory(external)

# Define _DEBUG on debug builds
if (MSVC)
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /DBUILD_TYPE=0")
elseif(CMAKE_COMPILER_IS_GNUCXX)
	# TODO add -lprofiler back
	set(CMAKE_CXX_FLAGS_DEBUG "-Og -D_DEBUG -DBUILD_TYPE=0 -Wall -g -ggdb -pedantic-errors -Wextra -lprofiler -fPIE -pie -fsanitize=leak -fsanitize=undefined")
	set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DBUILD_TYPE=1 -Wall -pedantic-errors -lprofiler -Wextra")
endif(MSVC)

configure_file(
	${PROJECT_SOURCE_DIR}/Config.h.in
	${PROJECT_BINARY_DIR}/Config.h )

# add Doxygen support
find_package(Doxygen)
if(DOXYGEN_FOUND)
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in
		${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
	add_custom_target(doc
		${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generating documentation with Doxygen" VERBATIM
		)
endif(DOXYGEN_FOUND)

function(enable_unity_build UB_FILENAME SOURCES_VAR)
	set(files ${${SOURCES_VAR}})

	# Create & write UB file
	set(unit_build_file ${PROJECT_BINARY_DIR}/${UB_FILENAME}.cpp)
	FILE(WRITE ${unit_build_file}
"//\n\
// NOTE: This file is automatically generated by CMake\n\
//\n\
// Any permanent changes should be made in the enable_unity_build function\n\
// located in the top-level CMakeLists.txt\n\
//\n\n")
	foreach(source_file ${files} )
		FILE( APPEND ${unit_build_file} "#include <${source_file}>\n")
	endforeach(source_file)

	# Ensure only unity file is compiled
	set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)
	set(${SOURCES_VAR} ${${SOURCES_VAR}} ${unit_build_file} PARENT_SCOPE)
endfunction(enable_unity_build)

## Header and Source files
file(GLOB_RECURSE CORE_SRC "core/*.cpp")
file(GLOB_RECURSE CORE_HEADER "core/*.h")
file(GLOB_RECURSE ENGINE_SRC "engine/*.cpp")
file(GLOB_RECURSE ENGINE_HEADER "engine/*.h")
file(GLOB_RECURSE TETRAD_SRC "tetrad-game/*.cpp")
list(REMOVE_ITEM TETRAD_SRC ${PROJECT_SOURCE_DIR}/tetrad-game/main.cpp)
file(GLOB_RECURSE TETRAD_HEADER "tetrad-game/*.h")

file(GLOB ENGINE_ECS "engine/ecs/*.h")
file(GLOB ENGINE_ECS_PRIVATE "engine/ecs/_private/*.cpp")
# We don't need to add this to ENGINE_SRC, as ecs source files are removed from
# that variable anyways.
list(APPEND ENGINE_ECS_PRIVATE
	${PROJECT_BINARY_DIR}/generated/ComponentManager.cpp)
file(GLOB ENGINE_EVENT "engine/event/*.h")
file(GLOB ENGINE_EVENT_PRIVATE "engine/event/_private/*.cpp")
file(GLOB ENGINE_PHYSICS "engine/physics/*.h")
file(GLOB ENGINE_PHYSICS_PRIVATE "engine/physics/_private/*.cpp")
file(GLOB ENGINE_RENDER "engine/render/*.h")
file(GLOB ENGINE_RENDER_PRIVATE "engine/render/_private/*.cpp")
file(GLOB ENGINE_RESOURCE "engine/resource/*.h")
file(GLOB ENGINE_RESOURCE_PRIVATE "engine/resource/_private/*.cpp")
file(GLOB ENGINE_SCREEN "engine/screen/*.h")
file(GLOB ENGINE_SCREEN_PRIVATE "engine/screen/_private/*.cpp")
file(GLOB ENGINE_TRANSFORM "engine/transform/*.h")
file(GLOB ENGINE_TRANSFORM_PRIVATE "engine/transform/_private/*.cpp")
file(GLOB ENGINE_UI "engine/ui/*.h")
file(GLOB ENGINE_UI_PRIVATE "engine/ui/_private/*.cpp")

file(GLOB_RECURSE EDITOR_SRC "editor/*.cpp")
list(REMOVE_ITEM EDITOR_SRC ${PROJECT_SOURCE_DIR}/editor/editorMain.cpp)
file(GLOB_RECURSE EDITOR_HEADER "editor/*.h")

list(REMOVE_ITEM ENGINE_SRC ${ENGINE_ECS_PRIVATE})

set(BASE_SRC ${CORE_SRC} ${ENGINE_ECS_PRIVATE} ${ENGINE_SRC})
set(BASE_HEADER ${ENGINE_HEADER} ${CORE_HEADER})

set(ALL_SRC ${BASE_SRC} ${TETRAD_SRC})
set(ALL_HEADER ${BASE_HEADER} ${EXAMLES_TETRAD_HEADER})

include_directories(
	${PROJECT_BINARY_DIR}
	${PROJECT_SOURCE_DIR}
	${PROJECT_SOURCE_DIR}/external/glfw/include/GLFW/
	${PROJECT_SOURCE_DIR}/external/glew/include/
	${PROJECT_SOURCE_DIR}/external/glm/
	${PROJECT_SOURCE_DIR}/external/stb/
	${PROJECT_SOURCE_DIR}/external/assimp/include/
	${PROJECT_SOURCE_DIR}/external/freetype-2.8/include/
	)

set(ALL_LIBS
	${ALL_LIBS}
	${OPENGL_LIBRARIES}
	glfw
	GLEW
	freetype
	assimp
	)

set(ALL_LIBS_EDITOR
  ${ALL_LIBS}
  ${wxWidgets_LIBRARIES}
  )

# Run build-tool
find_package(PythonInterp 3 REQUIRED)
set(BUILD_TOOL_COMMAND COMMAND "${PYTHON_EXECUTABLE}"
    "${PROJECT_SOURCE_DIR}/tools/build_tool"
    "${PROJECT_SOURCE_DIR}"
    "${PROJECT_BINARY_DIR}")
execute_process(${BUILD_TOOL_COMMAND})
add_custom_target(build-tool ALL ${BUILD_TOOL_COMMAND}
	COMMENT "Running build-tool prior to building tetrad")

# Compile protobufs
set(PROTOS "${PROJECT_SOURCE_DIR}/tools/build_tool/build_tool/manifest.proto")
foreach(proto ${PROTOS})
	list(APPEND proto_commands
		COMMAND protobuf::protoc
		  -I=${PROJECT_SOURCE_DIR}
		  --cpp_out="${PROJECT_BINARY_DIR}/generated"
		  "${proto}")
endforeach()
add_custom_target(compile-protobufs ALL ${proto_commands})

# Compile game
set(TETRAD-SRC tetrad-game/main.cpp ${ALL_SRC})
if(${BUILD_ENABLE_UNITY})
	enable_unity_build(tetrad-unity TETRAD-SRC)
endif()
add_executable(tetrad-game ${TETRAD-SRC} ${ALL_HEADER})
add_dependencies(tetrad-game build-tool)
add_dependencies(tetrad-game compile-protobufs)
target_link_libraries(tetrad-game ${ALL_LIBS})
target_compile_features(tetrad-game PUBLIC cxx_std_17)
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	#set_target_properties(tetrad-game PROPERTIES COMPILE_FLAGS "--save-temps")
endif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Compile package builder
add_executable(packageBuilder EXCLUDE_FROM_ALL
${PROJECT_SOURCE_DIR}/tools/package-builder/packageBuilder.cpp
${CORE_SRC}
${CORE_HEADER})
target_link_libraries(packageBuilder ${ALL_LIBS_EDITOR})
target_compile_features(packageBuilder PUBLIC cxx_std_17)
set_property(TARGET packageBuilder PROPERTY FOLDER "Tools")

# Compile package reader
add_executable(packageReader EXCLUDE_FROM_ALL
${PROJECT_SOURCE_DIR}/tools/package-reader/packageReader.cpp
${CORE_SRC}
${CORE_HEADER})
target_link_libraries(packageReader ${ALL_LIBS})
target_compile_features(packageReader PUBLIC cxx_std_17)
set_property(TARGET packageReader PROPERTY FOLDER "Tools")

#add_custom_target(tools COMMENT "Building all tools...")
#add_dependencies(tools packageBuilder packageReader)

# Compile editor
set(EDITOR-SRC ${PROJECT_SOURCE_DIR}/editor/editorMain.cpp
	${ALL_SRC}
	${EDITOR_SRC})
if(${BUILD_ENABLE_UNITY})
	enable_unity_build(editor-unity EDITOR-SRC)
endif()
add_executable(editor EXCLUDE_FROM_ALL
  ${EDITOR-SRC}
  ${ALL_HEADER}
  ${EDITOR_HEADER}
  )
target_link_libraries(editor ${ALL_LIBS})
target_compile_features(editor PUBLIC cxx_std_17)
add_dependencies(editor build-tool)
add_dependencies(editor compile-protobufs)

## Setting up Visual Studio filters
source_group(TetradGame\\_private FILES ${TETRAD_SRC})
source_group(TetradGame\\ FILES ${TETRAD_HEADER})

source_group(Engine\\ecs\\_private FILES ${ENGINE_ECS_PRIVATE})
source_group(Engine\\ecs FILES ${ENGINE_ECS})
source_group(Engine\\event\\_private FILES ${ENGINE_EVENT_PRIVATE})
source_group(Engine\\event FILES ${ENGINE_EVENT})
source_group(Engine\\game\\_private FILES ${ENGINE_GAME_PRIVATE})
source_group(Engine\\game FILES ${ENGINE_GAME})
source_group(Engine\\physics\\_private FILES ${ENGINE_PHYSICS_PRIVATE})
source_group(Engine\\physics FILES ${ENGINE_PHYSICS})
source_group(Engine\\render\\_private FILES ${ENGINE_RENDER_PRIVATE})
source_group(Engine\\render FILES ${ENGINE_RENDER})
source_group(Engine\\resource\\_private FILES ${ENGINE_RESOURCE_PRIVATE})
source_group(Engine\\resource FILES ${ENGINE_RESOURCE})
source_group(Engine\\screen\\_private FILES ${ENGINE_SCREEN_PRIVATE})
source_group(Engine\\screen FILES ${ENGINE_SCREEN})
source_group(Engine\\transform\\_private FILES ${ENGINE_TRANSFORM_PRIVATE})
source_group(Engine\\transform FILES ${ENGINE_TRANSFORM})
source_group(Engine\\ui\\_private FILES ${ENGINE_UI_PRIVATE})
source_group(Engine\\ui FILES ${ENGINE_UI})

source_group(Core\\_private FILES ${CORE_SRC})
source_group(Core\\ FILES ${CORE_HEADER})

source_group(Editor\\_private FILES ${EDITOR_SRC})
source_group(Editor\\ FILES ${EDITOR_HEADER})
